using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Caching.Memory;

namespace LearnApiNetCore.Controllers
{
    [ApiController]
    [Route("news")]
    public class NewsController : ControllerBase
    {
        private readonly IMemoryCache _cache;
        private const string CacheKey = "NewsList";
        private static List<string> _allNews = new List<string>
        {
            "Tin 1: H√¥m nay tr·ªùi ƒë·∫πp",
            "Tin 2: Gi√° xƒÉng gi·∫£m",
            "Tin 3: AI ph√°t tri·ªÉn m·∫°nh"
        };

        public NewsController(IMemoryCache cache)
        {
            _cache = cache;
        }

        // ‚úÖ L·∫•y danh s√°ch tin t·ª©c (cache 60 gi√¢y)
        [HttpGet]
        public IActionResult GetNews()
        {
            if (!_cache.TryGetValue(CacheKey, out List<string> cachedNews))
            {
                // Cache h·∫øt h·∫°n ho·∫∑c ch∆∞a c√≥ ‚Üí t·∫°o m·ªõi
                cachedNews = new List<string>(_allNews);

                // Log ra console ƒë·ªÉ d·ªÖ quan s√°t
                Console.WriteLine($"[CACHE] ‚ûï T·∫°o cache m·ªõi l√∫c {DateTime.Now:HH:mm:ss}");

                // Thi·∫øt l·∫≠p cache 60 gi√¢y
                _cache.Set(CacheKey, cachedNews, new MemoryCacheEntryOptions
                {
                    AbsoluteExpirationRelativeToNow = TimeSpan.FromSeconds(60),
                    PostEvictionCallbacks =
                    {
                        new PostEvictionCallbackRegistration
                        {
                            EvictionCallback = (key, value, reason, state) =>
                            {
                                Console.WriteLine($"[CACHE] ‚ùå Cache '{key}' b·ªã x√≥a l√∫c {DateTime.Now:HH:mm:ss} (L√Ω do: {reason})");
                            }
                        }
                    }
                });
            }

            Console.WriteLine($"[CACHE] üì§ Tr·∫£ d·ªØ li·ªáu l√∫c {DateTime.Now:HH:mm:ss}");

            return Ok(new
            {
                Time = DateTime.Now.ToString("HH:mm:ss"),
                Data = cachedNews
            });
        }

        // ‚úÖ Th√™m tin m·ªõi (ch∆∞a c·∫≠p nh·∫≠t cache)
        [HttpPost]
        public IActionResult AddNews([FromBody] string newNews)
        {
            _allNews.Add(newNews);
            Console.WriteLine($"[DATA] ‚ûï Th√™m tin m·ªõi: '{newNews}' l√∫c {DateTime.Now:HH:mm:ss}");
            return Ok(new { message = "ƒê√£ th√™m tin m·ªõi", total = _allNews.Count });
        }

        // ‚úÖ X√≥a cache th·ªß c√¥ng
        [HttpPost("clear-cache")]
        public IActionResult ClearCache()
        {
            if (_cache.TryGetValue(CacheKey, out _))
            {
                _cache.Remove(CacheKey);
                Console.WriteLine($"[CACHE] üßπ X√≥a cache th·ªß c√¥ng l√∫c {DateTime.Now:HH:mm:ss}");
                return Ok(new { message = "ƒê√£ x√≥a cache hi·ªán t·∫°i" });
            }
            else
            {
                Console.WriteLine($"[CACHE] ‚ö†Ô∏è Kh√¥ng c√≥ cache ƒë·ªÉ x√≥a (cache ƒë√£ h·∫øt h·∫°n) - {DateTime.Now:HH:mm:ss}");
                return Ok(new { message = "Cache ƒë√£ h·∫øt h·∫°n ho·∫∑c ch∆∞a ƒë∆∞·ª£c t·∫°o" });
            }
        }
    }
}
